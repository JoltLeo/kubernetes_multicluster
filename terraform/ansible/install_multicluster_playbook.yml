---
- hosts: all
  become: yes
  environment:
    KUBECONFIG: "{{ kubeconfig_env }}"
  
  pre_tasks:
  
    - name: Create kubeconfig files
      ansible.builtin.copy:
        dest: "{{ index }}.yml"
        content: |
          {{ item | b64decode }}
      loop: "{{ kubeconfigs_b64.split(',') }}"
      loop_control:
        index_var: index
      no_log: true  
      
    - name: Get all kubernetes cluster contexts
      command: |
        kubectl config get-contexts
      register: contexts
      
    - name: Show all kubernetes cluster contexts
      debug: var=contexts.stdout
  
  tasks:
  
    - name: Generate Linkerd certificates
      command: "step certificate create root.linkerd.cluster.local root.crt root.key --profile root-ca --no-password --insecure"
      register: result_1
      retries: 2
      delay: 10
      until: result_1 is not failed

    - name: Generate Linkerd issuer credentials certificates
      command: "step certificate create identity.linkerd.cluster.local issuer.crt issuer.key --profile intermediate-ca --not-after 8760h --no-password --insecure --ca root.crt --ca-key root.key"
      register: result_2
      retries: 2
      delay: 10
      until: result_2 is not failed

    - name: Install Linkerd in each cluster
      shell: "/home/runner/.linkerd2/bin/linkerd install --identity-trust-anchors-file root.crt --identity-issuer-certificate-file issuer.crt --identity-issuer-key-file issuer.key --context='{{ item }}' | kubectl --context='{{ item }}' apply -f -"
      register: result_3
      retries: 2
      delay: 60
      until: result_3 is not failed
      with_items: "{{ clusters_name.split(',') }}"

    - name: Check clusters
      shell: "/home/runner/.linkerd2/bin/linkerd check --context='{{ item }}'"
      register: "check_clusters1"
      with_items: "{{ clusters_name.split(',') }}"
      retries: 2
      delay: 60
      until: check_clusters1 is not failed

    - name: Show Check clusters
      debug: "msg={{ item.stdout_lines }}"
      with_items: "{{ check_clusters1.results }}"

    - name: Install Linkerd viz cluster
      shell: "/home/runner/.linkerd2/bin/linkerd viz install --context='{{ item }}' | kubectl --context='{{ item }}' apply -f -"
      register: result_4
      retries: 2
      delay: 60
      until: result_4 is not failed
      with_items: "{{ clusters_name.split(',') }}"

    - name: Check clusters viz
      shell: "/home/runner/.linkerd2/bin/linkerd check --context='{{ item }}'"
      register: "check_clusters"
      retries: 2
      delay: 90
      until: check_clusters is not failed
      with_items: "{{ clusters_name.split(',') }}"

    - name: Show Check clusters viz
      debug: "msg={{ item.stdout_lines }}"
      with_items: "{{ check_clusters.results }}"

    - name: Install Linkerd multicluster
      shell: "/home/runner/.linkerd2/bin/linkerd multicluster install --context='{{ item }}' | kubectl --context='{{ item }}' apply -f -"
      register: result_5
      retries: 2
      delay: 60
      until: result_5 is not failed
      with_items: "{{ clusters_name.split(',') }}"

    - name: Check gateway on clusters
      shell: "kubectl --context='{{ item }}' -n linkerd-multicluster rollout status deploy/linkerd-gateway"
      register: "check_gateway"
      retries: 2
      delay: 60
      until: check_gateway is not failed
      with_items: "{{ clusters_name.split(',') }}"

    - name: Show Check gateways
      debug: "msg={{ item.stdout_lines }}"
      with_items: "{{ check_gateway.results }}"

    - name: Link Linkerd clusters
      shell: |
        /home/runner/.linkerd2/bin/linkerd multicluster link --cluster-name {{ master_cluster }} --context='{{ master_cluster }}' --set 'enableHeadlessServices=true' | kubectl --context='{{ item }}' apply -f -
        /home/runner/.linkerd2/bin/linkerd multicluster link --cluster-name {{ item }} --context='{{ item }}' --set 'enableHeadlessServices=true' | kubectl --context='{{ master_cluster }}' apply -f -
      loop: "{{ clusters_name.split(',') }}"
      when: item != master_cluster
      register: result_6
      retries: 2
      delay: 60
      until: result_6 is not failed

    - name: Install nginx on clusters
      shell: "kubectl --context='{{ item }}' apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.2.1/deploy/static/provider/cloud/deploy.yaml"
      register: "check_nginx"
      with_items: "{{ clusters_name.split(',') }}"
      retries: 2
      delay: 60
      until: check_nginx is not failed

    - name: Show Check nginx
      debug: "msg={{ item.stdout_lines }}"
      with_items: "{{ check_nginx.results }}"

    - name: Expose dashboards
      shell: "kubectl --context='{{ item }}' apply -f /home/runner/work/kubernetes_multicluster/kubernetes_multicluster/terraform/ansible/deployments/expose_dashboard.yml"
      with_items: "{{ clusters_name.split(',') }}"
      register: result_7
      retries: 2
      delay: 60
      until: result_7 is not failed
